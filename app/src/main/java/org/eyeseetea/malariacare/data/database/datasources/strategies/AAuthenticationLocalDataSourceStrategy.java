package org.eyeseetea.malariacare.data.database.datasources.strategies;

import android.content.Context;

import org.eyeseetea.malariacare.R;
import org.eyeseetea.malariacare.data.IDataSourceCallback;
import org.eyeseetea.malariacare.data.database.datasources.AuthenticationLocalDataSource;
import org.eyeseetea.malariacare.data.database.model.OptionDB;
import org.eyeseetea.malariacare.data.database.model.QuestionDB;
import org.eyeseetea.malariacare.data.database.model.UserDB;
import org.eyeseetea.malariacare.data.database.utils.PopulateDBStrategy;
import org.eyeseetea.malariacare.data.database.utils.PreferencesState;
import org.eyeseetea.malariacare.data.database.utils.Session;

import java.util.List;

public abstract class AAuthenticationLocalDataSourceStrategy {
    protected AuthenticationLocalDataSource mAuthenticationLocalDataSource;

    public AAuthenticationLocalDataSourceStrategy(
            AuthenticationLocalDataSource authenticationLocalDataSource) {
        mAuthenticationLocalDataSource = authenticationLocalDataSource;
    }

    public void logout(IDataSourceCallback<Void> callback) {
        UserDB userDB = UserDB.getLoggedUser();

        if (userDB != null) {
            userDB.delete();
        }

        mAuthenticationLocalDataSource.clearCredentials();

        Session.logout();

        //reset org_unit
        PreferencesState.getInstance().saveStringPreference(R.string.org_unit,
                "");

        deleteOrgUnitQuestionOptions();

        new PopulateDBStrategy().logoutWipe();

        callback.onSuccess(null);
    }





    public void deleteOrgUnitQuestionOptions() {
        //Remove options generated by the selected orgunit children
        List<QuestionDB> questionDBs = QuestionDB.getAllQuestionsWithOrgUnitDropdownList();
        for (QuestionDB questionDB : questionDBs) {
            if (questionDB.getAnswerDB() != null) {
                List<OptionDB> optionDBs = questionDB.getAnswerDB().getOptionDBs();
                for (OptionDB optionDB : optionDBs) {
                    if(optionDB.getOptionAttributeDB()!=null) {
                        optionDB.getOptionAttributeDB().delete();
                    }
                    optionDB.delete();
                }
            }
        }
    }

    public String getServerDefaultUrl(Context mContext) {
        return mContext.getString(R.string.DEFAULT_SERVER_URL);
    }

    public void clearCredentials(Context context) {
        PreferencesState.getInstance().saveStringPreference(R.string.server_url_key,
                getServerDefaultUrl(context));
        PreferencesState.getInstance().saveStringPreference(R.string.dhis_user, "");
        PreferencesState.getInstance().saveStringPreference(R.string.dhis_password, "");
        PreferencesState.getInstance().reloadPreferences();
    }
}
